package hu.neuron.java.core.test;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import org.apache.log4j.Logger;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.MethodSorters;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("/spring-test-core.xml")
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
@Transactional
@TransactionConfiguration(defaultRollback = false)
public class JdbcTemplateTest {

	private static final Logger logger = Logger
			.getLogger(JdbcTemplateTest.class);

	private JdbcTemplate jdbcTemplate;

	private static Number key;

	@Autowired
	public void setDataSource(DataSource dataSource) {
		this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	@Test
	public void Test1createTable() {
		this.jdbcTemplate
				.execute("create table mytable (ID int GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1) , name varchar(100))");
	}

	@Test
	public void Test2insert() {
		final String INSERT_SQL = "insert into mytable (name) values(?)";
		final String name = "Rob";

		KeyHolder keyHolder = new GeneratedKeyHolder();
		jdbcTemplate.update(new PreparedStatementCreator() {
			public PreparedStatement createPreparedStatement(
					Connection connection) throws SQLException {
				PreparedStatement ps = connection.prepareStatement(INSERT_SQL,
						Statement.RETURN_GENERATED_KEYS);
				ps.setString(1, name);
				return ps;
			}
		}, keyHolder);

		key = keyHolder.getKey();
		logger.debug("new id: " + key);
	}

	@Test
	public void Test3update() {
		this.jdbcTemplate.update("update mytable set name = ? where id = ?",
				"BÃ©la", key.longValue());
	}

	@Test
	public void Test4SelectCount() {
		int count = this.jdbcTemplate.queryForObject(
				"select count(*) from mytable ", Integer.class);
		logger.debug("count: " + count);
	}

	@Test
	public void Test5delete() {
		this.jdbcTemplate.update("delete from mytable where id = ?",
				key.longValue());
	}

	@Test
	public void Test6dropTable() {
		this.jdbcTemplate.execute("drop table mytable ");
	}

}